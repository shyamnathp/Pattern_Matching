//
// Created by shyamnath on 6/19/21.
//
#include <chrono>
#include <iostream>
#include <algorithm>
#include <fstream>
#include <filesystem>

#include <aho_corasick.hpp>
#include <PatternMatchers.h>
#include <Dictionary.h>

namespace fs = std::filesystem;

template <typename TFunc> void RunAndMeasure(const char* title, TFunc func)
{
    const auto start = std::chrono::steady_clock::now();
    func();
    const auto end = std::chrono::steady_clock::now();
    std::cout << title << ": " <<
              std::chrono::duration <double, std::milli>(end - start).count()
              << "ms\n";
}

int main()
{
    fs::path conceptsPath = fs::path("../..") / "benchmarks/data/concepts.txt";
    fs::path fullPath = fs::canonical(conceptsPath);

    std::string input = "Boost Software License - Version 1.0 - August 17th, 2003\n"
                        "\n"
                        "Permission is hereby granted, free of charge, to any person or organization\n"
                        "obtaining a copy of the software and accompanying documentation covered by\n"
                        "this license (the \"Software\") to use, reproduce, display, distribute,\n"
                        "execute, and transmit the Software, and to prepare derivative works of the\n"
                        "Software, and to permit third-parties to whom the Software is furnished to\n"
                        "do so, all subject to the following:\n"
                        "\n"
                        "The copyright notices in the Software and this entire statement, including\n"
                        "the above license grant, this restriction and the following disclaimer,\n"
                        "must be included in all copies of the Software, in whole or in part, and\n"
                        "all derivative works of the Software, unless such copies or derivative\n"
                        "works are solely in the form of machine-executable object code generated by\n"
                        "a source language processor.\n"
                        "\n"
                        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n"
                        "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n"
                        "FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\n"
                        "SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\n"
                        "FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\n"
                        "ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n"
                        "DEALINGS IN THE SOFTWARE.";

    RunAndMeasure("aho_corasick", [&input, &fullPath] {

      std::string token;
      aho_corasick::trie trie;
      trie.case_insensitive();

      std::ifstream is(fullPath.string());
      while (std::getline(is, token))
      {
          std::transform(token.begin(), token.end(), token.begin(), [](unsigned char c) -> unsigned char { return std::tolower(c); });
          trie.insert(token);
      }

      trie.parse_text(input);
    });

    RunAndMeasure("pattern_matching_stl", [&input, &fullPath] {
      std::vector<std::string> concepts;
      std::string token;
      std::ifstream is(fullPath.string());
      while (std::getline(is, token))
      {
          std::transform(token.begin(), token.end(), token.begin(), [](unsigned char c) -> unsigned char { return std::tolower(c); });
          concepts.emplace_back(token);
      }

      for (const auto& concept: concepts)
      {
          boyer_moore::search(input.begin(), input.end(), concept.begin(), concept.end(), boyer_moore::withStl);
      }

    });

    RunAndMeasure("pattern_matching", [&input, &fullPath] {
      std::vector<std::string> concepts;
      std::string token;
      std::ifstream is(fullPath.string());
      while (std::getline(is, token))
      {
          std::transform(token.begin(), token.end(), token.begin(), [](unsigned char c) -> unsigned char { return std::tolower(c); });
          concepts.emplace_back(token);
      }

      for(const auto& concept: concepts)
      {
         boyer_moore::search(input.begin(), input.end(), concept.begin(), concept.end(), boyer_moore::withoutStl);
      }
    });


    RunAndMeasure("dictionary_match", [&input, &fullPath] {
      std::vector<std::string> concepts;
      std::string token;
      std::ifstream is(fullPath.string());
      while (std::getline(is, token))
      {
          std::transform(token.begin(), token.end(), token.begin(), [](unsigned char c) -> unsigned char { return std::tolower(c); });
          concepts.emplace_back(token);
      }

      auto wordMap = Dictionary(concepts);
      wordMap.findWords(input);
    });
}


